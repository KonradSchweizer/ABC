
def select_images(self, text: dict, category: str):
    #Runs through the image selection procedure.
    # Validate
    if category not in ["alcoholic", "non_alcoholic"]:
        raise ValueError("category must be either alcoholic or non_alcoholic") # must correspond to folder name

    # Initialize category dict
    self.data[category] = {}
    
    # Start drag-and-drop selection
    
    # The previous window minimization logic from your first snippet can be placed here
    self.minimize_window()

    image_path = "C:\\Users\\Konrad Schweizer\\OneDrive\\Dokumente\\University\\Master\\Major_Research_Project\\Code\\Python_Task\\abc-psychopy-mainV2\\abc-psychopy-main\\experiments\\abc\\images\\Selection\\"
    
    # Create a window
    win = visual.Window([1900, 1080], color='black', units='pix')

    # Define the draggable items and their positions
    non_alcoholic_positions = {
        'Sparkling': [-400, 250],
        'Non-Sparkling': [0, 250],
        'Water': [400, 250]
    }

    alcoholic_positions = {
        'Beer': [-400, 250],
        'Wine': [0, 250],
        'Liquor': [400, 250]
    }
    size_value = (400, 400)

    non_alcoholic_items = {
        'Sparkling': ImageStim(win, image=image_path + 'sparkling.png', pos=[-400, 250], size=size_value),
        'Non-Sparkling': ImageStim(win, image=image_path + 'non_sparkling.png', pos=[0, 250], size=size_value),
        'Water': ImageStim(win, image=image_path + 'water.png', pos=[400, 250], size=size_value)
    }

    alcoholic_items = {
        'Beer': ImageStim(win, image=image_path + 'beer.png', pos=[-400, 250], size=size_value),
        'Wine': ImageStim(win, image=image_path + 'wine.png', pos=[0, 250], size=size_value),
        'Liquor': ImageStim(win, image=image_path + 'liquor.png', pos=[400, 250], size=size_value)
    }

    targets = {
        '1st': {'pos': [-400, -150], 'stim': visual.TextStim(win, text='1st', font='Arial', pos=[-400, -150], height=50, color='red', wrapWidth=200)},
        '2nd': {'pos': [0, -150], 'stim': visual.TextStim(win, text='2nd', font='Arial', pos=[0, -150], height=50, color='red', wrapWidth=200)},
        '3rd': {'pos': [400, -150], 'stim': visual.TextStim(win, text='3rd', font='Arial', pos=[400, -150], height=50, color='red', wrapWidth=200)}
    }
    mouse = event.Mouse(win=win)
    selected_item = None
    initial_pos = None
    current_screen = 'non_alcoholic'
    next_screen = None

    def reset_positions(items_dict):
        for item in items_dict.values():
            item.pos = item.oriPos

    while True:
        if current_screen == 'non_alcoholic':
            items = non_alcoholic_items
        else:
            items = alcoholic_items

        # Check for item selection
        for item_name, item in items.items():
            if mouse.isPressedIn(item) and not selected_item:
                selected_item = item_name
                initial_pos = item.pos

        # Dragging logic
        if selected_item:
            items[selected_item].pos = mouse.getPos()
            if mouse.getPressed()[0] == 0:
                for target_name, target in targets.items():
                    if abs(items[selected_item].pos[0] - target['pos'][0]) < 100 and abs(items[selected_item].pos[1] - target['pos'][1]) < 100:
                        items[selected_item].pos = target['pos']
                        break
                else:
                    items[selected_item].pos = initial_pos
                selected_item = None

        # Check if all items are positioned
        all_positioned = all([any([abs(item.pos[0] - target['pos'][0]) < 100 and abs(item.pos[1] - target['pos'][1]) < 100 for target in targets.values()]) for item in items.values()])
        items_on_targets = [item for item in items.values() if any([abs(item.pos[0] - target['pos'][0]) < 100 and abs(item.pos[1] - target['pos'][1]) < 100 for target in targets.values()])]
        unique_targets = len(set([tuple(item.pos) for item in items_on_targets]))


        # Screen transition logic
        if all_positioned and unique_targets == len(items_on_targets):
            prompt = visual.TextStim(win, text='Press space to confirm your choices.', font='Arial', pos=[0, -450], height=40, color='green')
            prompt.draw()
            keys = event.getKeys()
            if 'space' in keys:
                if current_screen == 'non_alcoholic':
                    n_panels = [5, 3, 1]
                    for n, subcategory in zip(n_panels, selection.values()):
                        subcategory_imgs = [img for img in self.img_set_personalization.images[category][subcategory]] 
                        shuffle(subcategory_imgs)
                        subcategory_imgs = subcategory_imgs[0:n*9]
                        selected_images = []
                        for i in range(0, n):
                            current_imgs = subcategory_imgs[i*9:(i+1)*9]
                            selected_images += self.img_grid_selection(current_imgs, text)          
                        self.data[category][f"{subcategory} Selection"] = {str(i+1): img for i, img in enumerate(selected_images)}
                        self.win.flip()
                else:
                    n_panels = [5, 3, 1]
                    for n, subcategory in zip(n_panels, selection.values()):
                        subcategory_imgs = [img for img in self.img_set_personalization.images[category][subcategory]] 
                        shuffle(subcategory_imgs)
                        subcategory_imgs = subcategory_imgs[0:n*9]
                        selected_images = []
                        for i in range(0, n):
                            current_imgs = subcategory_imgs[i*9:(i+1)*9]
                            selected_images += self.img_grid_selection(current_imgs, text)          
                        self.data[category][f"{subcategory} Selection"] = {str(i+1): img for i, img in enumerate(selected_images)}
                        self.win.flip()
                    break
        else:
            next_screen = None

        # Drawing logic
        win.flip()
        for item in items.values():
            item.draw()
        for target in targets.values():
            target['stim'].draw()
            
        def reset_positions(items_dict, original_positions):
            for item_name, item in items_dict.items():
                item.pos = original_positions[item_name]
        # Screen switch
        if next_screen:
            reset_positions(non_alcoholic_items, non_alcoholic_positions)
            reset_positions(alcoholic_items, alcoholic_positions)
            current_screen = next_screen

        keys = event.getKeys()
        if 'escape' in keys:
            break

    win.close()




