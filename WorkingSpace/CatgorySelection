
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning) #Fuck them warnings
from psychopy import visual, event
import os

import os
from psychopy import visual, event

def select_images(category):
    win = visual.Window([1600, 900], color='black', units='pix')
    
    subcategories = {
        'alcoholic': ['Beer', 'Wine', 'Liquor'],
        'non-alcoholic': ['Sparkling', 'Non-Sparkling', 'Water']
    }

    positions = {
        'Beer': [-600, 0],
        'Wine': [0, 0],
        'Liquor': [600, 0],
        'Sparkling': [-600, 0],
        'Non-Sparkling': [0, 0],
        'Water': [600, 0],
        'continue': [700, -400]
    }

    # Assuming you have an 'images' directory where your images are stored
    image_path = "images"
    
    items = {
        name: {
            'stim': visual.ImageStim(
                win,
                image=os.path.join(image_path, f"{name.lower().replace('-', '_')}.png"),
                pos=positions[name],
                size=(400, 400)
            ),
            'text': name,  # Note: I'm using the name as text here. Modify as needed.
            'selected': False
        }
        for name in subcategories[category]
    }

    mouse = event.Mouse(win=win)
    selection_order = []
    instructions = [
        'Select your 1st preference',
        'Select your 2nd preference',
        'The remaining is your 3rd preference'
    ]

    instruction_idx = 0
    should_draw = True
    continue_text = visual.TextStim(win, text="Confirm", pos=positions['continue'], height=30, color='white')
    
    while True:
        if should_draw:
            win.clearBuffer()
            
            for name, data in items.items():
                data['stim'].setOpacity(0.5 if data['selected'] else 1)
                data['stim'].draw()
                name_text = visual.TextStim(win, text=data['text'], pos=data['stim'].pos, height=40, color='white')
                name_text.draw()

            instruction_text = visual.TextStim(win, text=instructions[instruction_idx], pos=[0, 400], height=40, color='white')
            instruction_text.draw()

            selected_subcat = [name for name, data in items.items() if data['selected']]
            if selected_subcat:
                continue_button = visual.Rect(win, width=250, height=50, pos=positions['continue'], fillColor=[0, 1, 0, 0.5])
                continue_text.draw()
                continue_button.draw()

            win.flip()
            should_draw = False

        # Check for subcategory selection
        for name in list(items.keys()):  
            if mouse.isPressedIn(items[name]['stim']):
                # Deselect the current item and select the clicked item
                for inner_name in items:
                    items[inner_name]['selected'] = False
                items[name]['selected'] = True
                should_draw = True

        # If a subcategory is selected, prepare for confirmation
        selected_subcat = [name for name, data in items.items() if data['selected']]
        if selected_subcat and mouse.isPressedIn(continue_button):
            selection_order.append(selected_subcat[0])
            del items[selected_subcat[0]]
            instruction_idx += 1
            should_draw = True

        # If two items are selected, auto-select the third
        if len(selection_order) == 2:
            remaining_subcategory = list(items.keys())[0]
            selection_order.append(remaining_subcategory)
            del items[remaining_subcategory]
            instruction_idx += 1
            should_draw = True

        # Terminate when all items are selected
        if len(selection_order) == 3:
            win.close()
            selection = {
                '1st': selection_order[0],
                '2nd': selection_order[1],
                '3rd': selection_order[2]
            }
            print(selection)
            return selection

        if 'escape' in event.getKeys():
            break

    win.close()


if __name__ == "__main__":
    category_input = "alcoholic"
    select_images(category_input)
