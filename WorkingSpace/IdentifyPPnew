def identify_participant(self):
        window = tk.Tk()
        window.geometry('1920x1080')
        window.configure(bg='black')
        window.attributes('-topmost', True)
        window.after_idle(window.attributes, '-topmost', False)
        # Error label defined here but packed only if error occurs
        error_label = tk.Label(window, text="", bg='black', fg='red', font=("Arial", 24))
        
        def validate_and_save():
            participant_id = id_entry.get()
            gender = gender_combobox.get()
            self.data["Participant ID"] = participant_id
            self.data["Sex"] = gender
            self.data["Condition"] = "" # Condition is determined at first session
            # Session info
            self.data["Current Session"] = 0
            print("Participant ID: ", participant_id, gender)
            if len(participant_id) == 6 and participant_id.isdigit():
                file_path = f"{self.config_path}/{self.experiment_name}_presession_{participant_id}.json"

                if os.path.exists(file_path):
                    overwrite_dlg = tk.Toplevel(window)
                    overwrite_dlg.attributes('-topmost', True)
                    overwrite_label = tk.Label(overwrite_dlg, text=self.language["Presession"]["Gui Overwrite"]["Field1"])
                    overwrite_label.pack(pady=10)

                    option = tk.StringVar(value=self.language["Presession"]["Gui Overwrite"]["Options1"][0])

                    for val in self.language["Presession"]["Gui Overwrite"]["Options1"]:
                        tk.Radiobutton(overwrite_dlg, text=val, variable=option, value=val).pack()

                    def overwrite():
                        if option.get() == self.language["Presession"]["Gui Overwrite"]["Options1"][0]:
                            os.remove(file_path)
                            overwrite_dlg.destroy()
                            window.destroy()
                            self.data_update_and_destroy(participant_id, gender)
                        else:
                            overwrite_dlg.destroy()

                    overwrite_submit = tk.Button(overwrite_dlg, text="Submit", command=overwrite)
                    overwrite_submit.pack(pady=10)

                else:
                    window.destroy()
                    self.data_update_and_destroy(participant_id, gender)

            else:
                error_label.config(text="Invalid input, please enter a valid ID and gender")
                error_label.pack(pady=10)
        
        # Main GUI layout with bigger font size and centered
        title_label = tk.Label(window, text=self.language["Presession"]["Gui Participant ID"]["Title"], bg='black', fg='white', font=("Arial", 30))
        title_label.pack(pady=50)

        id_label = tk.Label(window, text=self.language["Presession"]["Gui Participant ID"]["Field1"], bg='black', fg='white', font=("Arial", 24))
        id_label.pack(pady=20)

        id_entry = tk.Entry(window, font=("Arial", 24))
        id_entry.pack(pady=20)

        gender_label = tk.Label(window, text=self.language["Presession"]["Gui Participant ID"]["Field2"], bg='black', fg='white', font=("Arial", 24))
        gender_label.pack(pady=20)

        gender_combobox = ttk.Combobox(window, values=self.language["Presession"]["Gui Participant ID"]["Options2"], font=("Arial", 24))
        gender_combobox.pack(pady=20)

        submit_button = tk.Button(window, text="Submit", command=validate_and_save, font=("Arial", 24))
        submit_button.pack(pady=50)

        # Bind the "escape" key to quit the entire experiment
        window.bind('<Escape>', lambda e: self.quit())
        
        window.mainloop()
        
def data_update_and_destroy(self, participant_id, gender):
    # Placeholder method, ensure you implement this
    pass

def quit(self):
    # Close the Tkinter window and any other necessary cleanup
    tk._default_root.destroy()
    # If you have other code or processes running as part of your experiment, ensure they are terminated here
    exit()  # This will terminate the entire process